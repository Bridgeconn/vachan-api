version: '3.9'
services:
 kratos-migrate:
    image: oryd/kratos:v0.7.0-alpha.1
    environment:
      - DSN=postgres://kratos:secret@postgresd:5432/kratos?sslmode=disable&max_conns=20&max_idle_conns=4
    volumes:
      - type: volume
        source: kratos-sqlite
        target: /var/lib/sqlite
        read_only: false
      - type: bind
        source: ./Kratos_config/email-password
        target: /etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
    networks:
      - my-network

 postgresd:
    image: postgres:9.6
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=kratos
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=kratos
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      - my-network
    volumes: 
      - kratos-postgres-vol:/var/lib/postgresql/data

 kratos:
    image: oryd/kratos:v0.7.0-alpha.1
    ports:
      - '4433:4433' # public
      # - '4434:4434' # admin
    restart: unless-stopped
    environment:
      - DSN=postgres://kratos:secret@postgresd:5432/kratos?sslmode=disable&max_conns=20&max_idle_conns=4
      - LOG_LEVEL=trace
      - COURIER_SMTP_CONNECTION_URI=${VACHAN_SUPPORT_EMAIL_CREDS:-smtps://test:test@mailslurper:1025/?skip_ssl_verify=true&legacy_ssl=true}
      - COURIER_SMTP_FROM_ADDRESS=${VACHAN_SUPPORT_EMAIL:-EMAIL_ADDRESS@bridgeconn.com}
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    volumes:
      # - type: volume
      #   source: kratos-sqlite
      #   target: /var/lib/sqlite
      #   read_only: false
      - type: bind
        source: ./Kratos_config/email-password
        target: /etc/config/kratos
    expose:
      - 4434
      - 4433
    networks:
      - my-network

 vachan-db:
    image: postgres:12.7
    healthcheck:
     test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
     timeout: 45s
     interval: 10s
     retries: 10
    restart: always
    environment:
     - POSTGRES_USER=${VACHAN_POSTGRES_USER:-postgres}
     - POSTGRES_PASSWORD=${VACHAN_POSTGRES_PASSWORD:-password}
     - POSTGRES_DB=${VACHAN_POSTGRES_DATABASE:-vachan_dev}
     - POSTGRES_HOST_AUTH_METHOD=trust
    logging:
     options:
      max-size: 10m
      max-file: "3"
    expose:
     - 5432
    ports:
     # HOST:CONTAINER
     - "5433:5432"
    networks:
     - my-network
    volumes:
     # - ${VACHAN_POSTGRES_DATA_DIR:-./pgdata}:/var/lib/postgresql/data
     - vachan-db-vol:/var/lib/postgresql/data
     - ../db/csvs:/csvs
     - ../db/seed_DB.sql:/docker-entrypoint-initdb.d/seed_DB.sql

# vachan-api app
 vachan-api:
    build:
     context: ../
     dockerfile: ./docker/Dockerfile
    healthcheck:
     timeout: 45s
     interval: 10s
     retries: 10
    environment:
     - VACHAN_POSTGRES_HOST=vachan-db
     - VACHAN_POSTGRES_USER=${VACHAN_POSTGRES_USER:-postgres}
     - VACHAN_POSTGRES_PASSWORD=${VACHAN_POSTGRES_PASSWORD:-password}
     - VACHAN_POSTGRES_DATABASE=${VACHAN_POSTGRES_DATABASE:-vachan_dev}
     - VACHAN_POSTGRES_PORT=5432
     - VACHAN_KRATOS_PUBLIC_URL=http://kratos:4433/
     - VACHAN_KRATOS_ADMIN_URL=http://kratos:4434/
     - VACHAN_SUPER_USERNAME=${VACHAN_SUPER_USERNAME}
     - VACHAN_SUPER_PASSWORD=${VACHAN_SUPER_PASSWORD}
     - VACHAN_TEST_MODE="False"
     - VACHAN_LOGGING_LEVEL=INFO
     - VACHAN_GITLAB_TOKEN=${VACHAN_GITLAB_TOKEN:-none}
     - VACHAN_REDIS_HOST=redis
     - VACHAN_REDIS_PORT=${VACHAN_REDIS_PORT:-6379}
     - VACHAN_REDIS_PASS=${VACHAN_REDIS_PASS:-vsfrgetd}
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    volumes:
     - logs-vol:/app/logs
    restart: always
    links:
     - vachan-db
     - kratos
    depends_on:
     - kratos-migrate
     - postgresd
    expose:
     - 8000
    networks:
     - my-network

 vachan-demos:
    image: kavitha3797/vachan-demos:2.0.0-alpha.2
    expose:
      - 8002
    command: uvicorn main:app --host 0.0.0.0 --port 8002
    restart: always
    environment:
     - VACHAN_DOMAIN=${VACHAN_DOMAIN:-api.vachanengine.org}
     - VACHAN_LOGGING_LEVEL=INFO
    volumes:
     - logs-vol:/app/logs
    networks:
     - my-network

 # Web Server
 web-server:
    image: nginx:latest
    ports:
     - 80:80
    restart: always
    expose:
     - 80
    depends_on:
     - vachan-api
    volumes:
     - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
     - logs-vol:/var/log/nginx/
    networks:
     - my-network

 #redis caching DB
 redis:
    container_name: redis
    image: "redis:alpine"
    expose:
      - 6379
    volumes:
      # save redisearch data to your current working directory
      - redis-data:/app/data
      # - ./redis_config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server --requirepass ${VACHAN_REDIS_PASS:-vsfrgetd}
    # command: redis-server --bind 172.28.1.4
    # command: redis-server /usr/local/etc/redis/redis.conf
    restart: on-failure
    links:
      - vachan-api
    networks:
     - my-network

 # redis db visualization dashboard
 redisinsight:
    container_name: redisinsight
    image: redislabs/redisinsight:latest
    ports:
      - '8001:8001'
    volumes:
      # - ./redisinsight:/db
      - redisinsight:/app/db
    networks:
     - my-network

networks:
   my-network:

volumes:
  vachan-db-vol:
  logs-vol:
  kratos-sqlite:
  redis-data:
  redisinsight:
  kratos-postgres-vol: